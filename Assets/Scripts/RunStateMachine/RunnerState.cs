// Autogenerated with StateSmith 0.19.0-alpha-1+050895fb5381e265cf7dd2f0082f3d610699de73.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#nullable enable

// Generated state machine
public partial class RunnerState
{
    public enum EventId
    {
        DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    }

    public const int EventIdCount = 1;

    public enum StateId
    {
        ROOT = 0,
        FREEZE = 1,
        GET_NEW_TARGET = 2,
        MOVE_TO_TARGET = 3,
    }

    public const int StateIdCount = 4;

    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId stateId;

    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public RunnerState()
    {
    }

    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public void Start()
    {
        ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.

            // ROOT.<InitialState> behavior
            // uml: TransitionTo(FREEZE)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.

                // Step 2: Transition action: ``.

                // Step 3: Enter/move towards transition target `FREEZE`.
                FREEZE_enter();

                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }

    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public void DispatchEvent(EventId eventId)
    {

        switch (this.stateId)
        {
            // STATE: RunnerState
            case StateId.ROOT:
                // state and ancestors have no handler for `do` event.
                break;

            // STATE: FREEZE
            case StateId.FREEZE:
                FREEZE_do();
                break;

            // STATE: GET_NEW_TARGET
            case StateId.GET_NEW_TARGET:
                GET_NEW_TARGET_do();
                break;

            // STATE: MOVE_TO_TARGET
            case StateId.MOVE_TO_TARGET:
                MOVE_TO_TARGET_do();
                break;
        }

    }

    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private void ExitUpToStateHandler(StateId desiredState)
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case StateId.FREEZE: FREEZE_exit(); break;

                case StateId.GET_NEW_TARGET: GET_NEW_TARGET_exit(); break;

                case StateId.MOVE_TO_TARGET: MOVE_TO_TARGET_exit(); break;

                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private void ROOT_enter()
    {
        this.stateId = StateId.ROOT;
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FREEZE
    ////////////////////////////////////////////////////////////////////////////////

    private void FREEZE_enter()
    {
        this.stateId = StateId.FREEZE;

        // FREEZE behavior
        // uml: enter / { UpdateAnimation(""); }
        {
            // Step 1: execute action `UpdateAnimation("");`
            UpdateAnimation("");
        } // end of behavior for FREEZE
    }

    private void FREEZE_exit()
    {
        this.stateId = StateId.ROOT;
    }

    private void FREEZE_do()
    {
        // FREEZE behavior
        // uml: do TransitionTo(MOVE_TO_TARGET)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            FREEZE_exit();

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `MOVE_TO_TARGET`.
            MOVE_TO_TARGET_enter();

            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for FREEZE

        // No ancestor handles this event.
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GET_NEW_TARGET
    ////////////////////////////////////////////////////////////////////////////////

    private void GET_NEW_TARGET_enter()
    {
        this.stateId = StateId.GET_NEW_TARGET;

        // GET_NEW_TARGET behavior
        // uml: enter / { RotateToTarget(); }
        {
            // Step 1: execute action `RotateToTarget();`
            RotateToTarget();
        } // end of behavior for GET_NEW_TARGET
    }

    private void GET_NEW_TARGET_exit()
    {
        this.stateId = StateId.ROOT;
    }

    private void GET_NEW_TARGET_do()
    {
        // GET_NEW_TARGET behavior
        // uml: do TransitionTo(MOVE_TO_TARGET)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            GET_NEW_TARGET_exit();

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `MOVE_TO_TARGET`.
            MOVE_TO_TARGET_enter();

            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for GET_NEW_TARGET

        // No ancestor handles this event.
    }


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MOVE_TO_TARGET
    ////////////////////////////////////////////////////////////////////////////////

    private void MOVE_TO_TARGET_enter()
    {
        this.stateId = StateId.MOVE_TO_TARGET;

        // MOVE_TO_TARGET behavior
        // uml: enter / { UpdateAnimation("Running"); }
        {
            // Step 1: execute action `UpdateAnimation("Running");`
            UpdateAnimation("Running");
        } // end of behavior for MOVE_TO_TARGET
    }

    private void MOVE_TO_TARGET_exit()
    {
        this.stateId = StateId.ROOT;
    }

    private void MOVE_TO_TARGET_do()
    {
        // MOVE_TO_TARGET behavior
        // uml: do / { MoveTowardTarget(); }
        {
            // Step 1: execute action `MoveTowardTarget();`
            MoveTowardTarget();
        } // end of behavior for MOVE_TO_TARGET

        // MOVE_TO_TARGET behavior
        // uml: do [IsTargetReached] TransitionTo(GET_NEW_TARGET)
        if (IsTargetReached)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            MOVE_TO_TARGET_exit();

            // Step 2: Transition action: ``.

            // Step 3: Enter/move towards transition target `GET_NEW_TARGET`.
            GET_NEW_TARGET_enter();

            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for MOVE_TO_TARGET

        // No ancestor handles this event.
    }

    // Thread safe.
    public static string StateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.FREEZE: return "FREEZE";
            case StateId.GET_NEW_TARGET: return "GET_NEW_TARGET";
            case StateId.MOVE_TO_TARGET: return "MOVE_TO_TARGET";
            default: return "?";
        }
    }

    // Thread safe.
    public static string EventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId.DO: return "DO";
            default: return "?";
        }
    }
}
